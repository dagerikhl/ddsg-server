const fileHandler = require('../file-handler');
const utilities = require('../utilities');

/**
 * All of the objects generated by this method is supposed to follow the STIX 2 standard. This includes both the
 * objects and the relationships. This is restricted to the layout of STIX, and does not mean they will follow the
 * exact schema for ojects and relationships.
 *
 * The STIX 2 standard can be found here: https://oasis-open.github.io/cti-documentation/stix/intro
 *
 * The relevant STIX Data Objects (SDOs) created by this method are:
 * 1. Attack Pattern: Represents an attack pattern as fetched from CAPEC.
 * 2. Course of Action: Represents a potential mitigation of an attack pattern.
 *
 * In addition, these custom Data Objects (DOs) will be included:
 * 3. Weakness: Represents a weakness as fetched from CWE.
 *
 * And the relevant STIX Relationship Objects (SROs) created by this method are:
 * 1. Relationship.
 *
 * @param objects Contains the filtered and unfiltered objects from data sources.
 * @param cb Used to relay the generated entities back to the calling function.
 */
function generateStixEntities(objects, cb) {
    const { attackPatterns, courseOfActions } = generateAttackPatternsAndCourseOfActions(objects);
    const weaknesses = generateWeaknesses(objects);
    const SDOs = {
        attackPatterns,
        courseOfActions,
        weaknesses
    };

    const relationships = generateRelationships(objects, SDOs);
    const SROs = {
        relationships
    };

    const entities = {
        SDOs,
        SROs
    };

    cb(entities);
}

function generateAttackPatternsAndCourseOfActions(objects) {
    const attackPatterns = [];
    const courseOfActions = [];
    for (let capecObject of objects.capecObjectsFiltered) {
        attackPatterns.push(generateAttackPatternFrom(capecObject));
        courseOfActions.concat(generateCourseOfActionsFor(capecObject));
        // DEBUG
        // break;
    }

    return {
        attackPatterns,
        courseOfActions
    };
}

function generateAttackPatternFrom(capecObject) {
    const uuid = utilities.uuid();
    const timestamp = utilities.timestamp();

    // General standard STIX properties
    const attackPattern = {
        type: 'attack-pattern',
        id: `attack-pattern--${uuid}`,
        created: timestamp,
        modified: timestamp
    };

    // Generated standard STIX properties
    attackPattern.name = capecObject['_attributes']['Name'] || null;

    // TODO Simplified due to the structure of CAPEC's description being complex; no lists or codeblocks are included
    attackPattern.description = null;
    const descriptionObject = capecObject['capec:Description']['capec:Summary'];
    if (descriptionObject['capec:Text']) {
        if (descriptionObject['capec:Text'] instanceof Array) {
            attackPattern.description = descriptionObject['capec:Text']
                .map((e) => {
                    return e['_text'];
                })
                .join('\n');
        } else {
            attackPattern.description = descriptionObject['capec:Text']['_text'];
        }
    }

    attackPattern.external_references = [{
        source_name: 'capec',
        id: `CAPEC-${capecObject['_attributes']['ID']}`
    }];

    // Custom properties outside of STIX
    attackPattern.custom = {};

    attackPattern.custom.severity = null;
    const severityObject = capecObject['capec:Typical_Severity'];
    if (severityObject) {
        attackPattern.custom.severity = severityObject['_text'];
    }

    attackPattern.custom.likelihood = null;
    const likelihoodObject = capecObject['capec:Typical_Likelihood_of_Exploit'];
    if (likelihoodObject && likelihoodObject['capec:Likelihood']) {
        attackPattern.custom.likelihood = likelihoodObject['capec:Likelihood']['_text'];
    }

    attackPattern.custom.injection_vector = null;
    const injectionVectorObject = capecObject['capec:Injection_Vector'];
    if (injectionVectorObject && injectionVectorObject['capec:Text']) {
        attackPattern.custom.injection_vector = injectionVectorObject['capec:Text']['_text'];
    }

    attackPattern.custom.payload = null;
    const payloadObject = capecObject['capec:Payload'];
    if (payloadObject && payloadObject['capec:Text']) {
        attackPattern.custom.payload = payloadObject['capec:Text']['_text'];
    }

    attackPattern.custom.activation_zone = null;
    const activationZoneObject = capecObject['capec:Activation_Zone'];
    if (activationZoneObject && activationZoneObject['capec:Text']) {
        attackPattern.custom.activation_zone = activationZoneObject['capec:Text']['_text'];
    }

    attackPattern.custom.cia = null;
    const ciaObject = capecObject['capec:CIA_Impact'];
    if (ciaObject && ciaObject !== {}) {
        attackPattern.custom.cia = {
            confidentiality: ciaObject['capec:Confidentiality_Impact']['_text'],
            integrity: ciaObject['capec:Integrity_Impact']['_text'],
            availability: ciaObject['capec:Availability_Impact']['_text']
        };
    }

    if (process.env.NODE_ENV === 'development') {
        writeTestOutputToFile(capecObject);
    }

    return attackPattern;
}

function generateCourseOfActionsFor(capecObject) {
}

function generateCourseOfActionFrom(capecObjectMitigation) {
}

function generateWeaknesses(objects) {
}

function generateWeaknessFrom(cweObject) {
}

function generateRelationships(objects, SDOs) {
}

function writeTestOutputToFile(data) {
    console.log('DEBUG Writing...');
    fileHandler.setFileContent('entitiesTest.json', JSON.stringify(data, null, 4));
    console.log('DEBUG Written.');
}

module.exports = {
    generateStixEntities
};
